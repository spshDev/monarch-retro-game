extends Node2D

# Defaults
var famine = false
var war = false
var revolt = false

# Inventory
var food = 0
var army = 0
var religion = 0
var year = 1

# Counter
@onready var food_score: Label = $SCORE/FoodScore
@onready var army_score: Label = $SCORE/ArmyScore
@onready var religion_score: Label = $SCORE/ReligionScore
@onready var score: Label = $Score


# Bars
@onready var hunger_timer: Timer = $HungerTimer
@onready var defense_timer: Timer = $DefenseTimer
@onready var manipulation_timer: Timer = $ManipulationTimer
@onready var hunger_bar: TextureProgressBar = $TimeOuts/HungerBar
@onready var defense_bar: TextureProgressBar = $TimeOuts/DefenseBar
@onready var manipulation_bar: TextureProgressBar = $TimeOuts/ManipulationBar


# Buttons
@onready var ration: Button = $ClickerMechanics/Ration
@onready var military: Button = $ClickerMechanics/Military
@onready var church: Button = $ClickerMechanics/Church

# Timers
@onready var church_timer: Timer = $ClickerMechanics/ChurchTimer
@onready var ration_timer: Timer = $ClickerMechanics/RationTimer
@onready var military_timer: Timer = $ClickerMechanics/MilitaryTimer

# Progress Bars
@onready var ration_wait: ProgressBar = $ClickerMechanics/RationWait
@onready var military_wait: ProgressBar = $ClickerMechanics/MilitaryWait
@onready var church_wait: ProgressBar = $ClickerMechanics/ChurchWait

# YearCounter
func _on_score_timer_timeout() -> void:
	year += 1
	score.text = "YEAR "+str(year)

# Clicker mechanics
func _on_ration_pressed() -> void:
	ration_timer.start()
	ration.disabled = true
	
func _on_military_pressed() -> void:
	military_timer.start()
	military.disabled = true

func _on_church_pressed() -> void:
	church_timer.start()
	church.disabled = true
	
func _on_church_timer_timeout() -> void:
	religion += 1
	church.disabled = false

func _on_ration_timer_timeout() -> void:
	food += 1
	ration.disabled = false

func _on_military_timer_timeout() -> void:
	army += 1
	military.disabled = false

func _process(delta: float) -> void:
	# Counter
	if food<10:
		food_score.text = "0"+str(food)
	else:
		food_score.text = str(food)
	if religion<10:
		religion_score.text = "0"+str(religion)
	else:
		religion_score.text = str(religion)
	if army<10:
		army_score.text = "0"+str(army)
	else:
		army_score.text = str(army)
	
	# Clicker timers
	if ration_timer.time_left != ration_timer.wait_time:
		var percentage = (ration_timer.time_left/ration_timer.wait_time)*100
		ration_wait.value = percentage

	if church_timer.time_left != church_timer.wait_time:
		var percentage = (church_timer.time_left/church_timer.wait_time)*100
		church_wait.value = percentage

	if military_timer.time_left != military_timer.wait_time:
		var percentage = (military_timer.time_left/military_timer.wait_time)*100
		military_wait.value = percentage
	
	
	# Counter timers
	if hunger_timer.time_left != hunger_timer.wait_time:
		var percentage = (hunger_timer.time_left/hunger_timer.wait_time)*100
		hunger_bar.value = percentage
		
	if defense_timer.time_left != defense_timer.wait_time:
		var percentage = (defense_timer.time_left/defense_timer.wait_time)*100
		defense_bar.value = percentage
	
	if manipulation_timer.time_left != manipulation_timer.wait_time:
		var percentage = (manipulation_timer.time_left/manipulation_timer.wait_time)*100
		manipulation_bar.value = percentage
		


# Renew Mechanics
func _on_food_pressed() -> void:
	if hunger_bar.value != 0:
		if food>0:
			if hunger_timer.time_left<=38:
				print("OLD TIME: ", hunger_timer.time_left)
				hunger_timer.start(hunger_timer.time_left+2)
				food -= 1
				print("NEW TIME: ", hunger_timer.time_left)
				
			elif hunger_timer.time_left == 40:
				pass #HUNGER FULL
				
			else:
				print("OLD TIME: ", hunger_timer.time_left)
				hunger_timer.start(40)
				print("NEW TIME: ", hunger_timer.time_left)
				food -= 1
		else:
			print("broke ah no food")


func _on_army_pressed() -> void:
	if defense_bar.value != 0:
		if army>0:
			if defense_timer.time_left <= 48:
				defense_timer.start(defense_timer.time_left+2)
				army -= 1
			elif defense_timer.time_left == 50:
				pass #ARMY FULL
			else:
				defense_timer.start(50)
				army -= 1
		else:
			print("no army broke boy")


func _on_religion_pressed() -> void:
	if manipulation_bar.value != 0:
		if religion>0:
			if manipulation_timer.time_left <= 55:
				manipulation_timer.start(manipulation_timer.time_left+2)
				religion -= 1
			elif manipulation_timer.time_left == 60:
				pass # RELIGION FULL
			else:
				manipulation_timer.start(60)
				religion -=1
		else:
			print("no influence weirdo")



# Endings and GAME OVER
# Counter Timeouts
func _on_hunger_timer_timeout() -> void:
	famine = true
	famine_card()


func _on_defense_timer_timeout() -> void:
	war = true
	war_card()


func _on_manipulation_timer_timeout() -> void:
	revolt = true
	revolt_card()


	
# Loss of food
func famine_card():
	print("you starve to death ah")
	game_over()

# Loss of religion	
func revolt_card():
	print("you have 0 rizz")
	game_over()
	
# Loss of army
func war_card():
	print("youre no longer the sigma")
	game_over()
	
func game_over():
	print("game ended niggesh")



extends Control

@onready var play_button = $UI/Buttons/Play
@onready var tutorial_button = $UI/Buttons/Tutorial
@onready var quit_button = $UI/Buttons/Quit

func _ready():
	_connect_buttons()
	_set_pivot_to_center()

func _connect_buttons():
	play_button.pressed.connect(_on_play_pressed)
	tutorial_button.pressed.connect(_on_tutorial_pressed)
	quit_button.pressed.connect(_on_quit_pressed)
	
	for button in [play_button, tutorial_button, quit_button]:
		button.mouse_entered.connect(_on_button_hover.bind(button))
		button.mouse_exited.connect(_on_button_exit.bind(button))

func _set_pivot_to_center():
	for button in [play_button, tutorial_button, quit_button]:
		button.pivot_offset = button.size / 2  # Set pivot to center

func _on_button_hover(button):
	var tween = button.create_tween()
	tween.tween_property(button, "scale", Vector2(1.1, 1.1), 0.1).set_trans(Tween.TRANS_SINE)
	tween.tween_property(button, "modulate", Color(1.2, 1.2, 1.2, 1), 0.1).set_trans(Tween.TRANS_SINE) # Slight glow
	button.add_theme_color_override("font_color", Color(1, 1, 0.8))  # Light yellowish glow

func _on_button_exit(button):
	var tween = button.create_tween()
	tween.tween_property(button, "scale", Vector2(1, 1), 0.1).set_trans(Tween.TRANS_SINE)
	tween.tween_property(button, "modulate", Color(1, 1, 1, 1), 0.1).set_trans(Tween.TRANS_SINE)  # Reset glow
	button.add_theme_color_override("font_color", Color(1, 1, 1))  # Reset text color to white

func _on_button_pressed(button, scene_path):
	var tween = button.create_tween()
	tween.tween_property(button, "scale", Vector2(0.9, 0.9), 0.05).set_trans(Tween.TRANS_QUAD)
	tween.tween_property(button, "modulate", Color(0.8, 0.8, 0.8, 1), 0.05).set_trans(Tween.TRANS_QUAD)  # Slight darkening effect
	tween.tween_property(button, "scale", Vector2(1, 1), 0.1).set_trans(Tween.TRANS_QUAD)
	tween.tween_property(button, "modulate", Color(1, 1, 1, 1), 0.1).set_trans(Tween.TRANS_QUAD)  # Reset color

	await get_tree().create_timer(0.15).timeout  # Small delay before scene change
	get_tree().change_scene_to_file(scene_path)

func _on_play_pressed():
	_on_button_pressed(play_button, "res://scenes/map.tscn")

func _on_tutorial_pressed():
	_on_button_pressed(tutorial_button, "res://scenes/tutorial.tscn")

func _on_quit_pressed():
	_on_button_pressed(quit_button, "")  # No scene, so just quit
	await get_tree().create_timer(0.15).timeout
	get_tree().quit()


extends Control

@onready var back_button = $Back  # Ensure correct path

func _ready():
	_set_pivot_to_center()
	_connect_button()

func _set_pivot_to_center():
	back_button.pivot_offset = back_button.size / 2  # Ensure pivot is centered

func _connect_button():
	back_button.pressed.connect(_on_back_pressed)
	back_button.mouse_entered.connect(_on_button_hover)
	back_button.mouse_exited.connect(_on_button_exit)

func _on_button_hover():
	var tween = back_button.create_tween()
	tween.tween_property(back_button, "scale", Vector2(2.1, 2.1), 0.1).set_trans(Tween.TRANS_SINE)
	tween.tween_property(back_button, "modulate", Color(1.3, 1.3, 1.3, 1), 0.1).set_trans(Tween.TRANS_SINE)  # Light glow
	back_button.pivot_offset = back_button.size / 2  # **Reapply pivot after scaling**

func _on_button_exit():
	var tween = back_button.create_tween()
	tween.tween_property(back_button, "scale", Vector2(2, 2), 0.1).set_trans(Tween.TRANS_SINE)
	tween.tween_property(back_button, "modulate", Color(1, 1, 1, 1), 0.1).set_trans(Tween.TRANS_SINE)  # Reset glow
	back_button.pivot_offset = back_button.size / 2  # **Ensure pivot stays centered**

func _on_back_pressed():
	var tween = back_button.create_tween()
	tween.tween_property(back_button, "scale", Vector2(1.9, 1.9), 0.05).set_trans(Tween.TRANS_QUAD)  # Snappy press effect
	tween.tween_property(back_button, "modulate", Color(0.8, 0.8, 0.8, 1), 0.05).set_trans(Tween.TRANS_QUAD)  # Slight darkening
	tween.tween_property(back_button, "scale", Vector2(2, 2), 0.1).set_trans(Tween.TRANS_QUAD)
	tween.tween_property(back_button, "modulate", Color(1, 1, 1, 1), 0.1).set_trans(Tween.TRANS_QUAD)  # Reset color

	await get_tree().create_timer(0.15).timeout  # Small delay before scene change
	get_tree().change_scene_to_file("res://scenes/main_menu.tscn")
